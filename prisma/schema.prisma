// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  user_id          Int            @id @default(autoincrement())
  name             String
  telephone_number String
  email            String         @unique
  password         String
  address          String
  gender           String
  identity_number  String
  age              Int
  role             String
  otp              String?
  otp_expiry       String?
  reset_token      String?
  verified         Boolean        @default(false)
  notifications    Notification[]
  transactions     Transaction[]
}

model Notification {
  notification_id Int    @id @default(autoincrement())
  title           String
  description     String
  user_id         Int
  user            Users  @relation(fields: [user_id], references: [user_id])
  is_read         Boolean @default(false)
}

model Transaction {
  transaction_id   Int      @id @default(autoincrement())
  status           String
  redirect_url     String
  transaction_date DateTime
  token            String
  message          String
  total_payment    Float
  user_id          Int
  user             Users    @relation(fields: [user_id], references: [user_id])
  tickets          Ticket[]
}

model Ticket {
  ticket_id      Int         @id @default(autoincrement())
  transaction_id Int
  plane_id       Int
  passenger_id   Int
  seat_id        Int
  transaction    Transaction @relation(fields: [transaction_id], references: [transaction_id], onDelete: Cascade)
  passenger      Passenger   @relation(fields: [passenger_id], references: [passenger_id])
  seat           Seat        @relation(fields: [seat_id], references: [seat_id])
  plane          Plane       @relation(fields: [plane_id], references: [plane_id])
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
}

model Passenger {
  passenger_id     Int         @id @default(autoincrement())
  title           String
  full_name       String
  family_name     String?
  birth_date      DateTime?
  nationality     String
  id_number       String?
  id_issuer       String?
  id_expiry       DateTime?
  tickets         Ticket[]
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
}

model Seat {
  seat_id      Int       @id @default(autoincrement())
  seat_number  String
  class        String
  price        Int
  plane_id     Int
  is_available Boolean   @default(true)
  version      Int       @default(0)
  plane        Plane     @relation(fields: [plane_id], references: [plane_id])
  tickets      Ticket[]
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
}

model Plane {
  plane_id                Int      @id @default(autoincrement())
  airline_id              Int
  airport_id_origin       Int
  airport_id_destination  Int
  departure_time          DateTime
  arrival_time            DateTime
  departure_terminal      String
  baggage_capacity        Float
  plane_code              String
  cabin_baggage_capacity  Float
  meal_available          Boolean
  wifi_available          Boolean
  in_flight_entertainment Boolean
  power_outlets           Boolean
  offers                  String
  duration                Int
  airline                 Airline  @relation(fields: [airline_id], references: [airline_id])
  origin_airport          Airport  @relation("OriginAirport", fields: [airport_id_origin], references: [airport_id])
  destination_airport     Airport  @relation("DestinationAirport", fields: [airport_id_destination], references: [airport_id])
  seats                   Seat[]
  tickets    Ticket[]
}

model Airline {
  airline_id   Int     @id @default(autoincrement())
  airline_name String
  image_url    String
  times_used   Int
  file_id      String  @unique
  planes       Plane[]
}

model Airport {
  airport_id         Int       @id @default(autoincrement())
  name               String
  address            String
  airport_code       String
  image_url          String
  file_id            String    @unique
  times_visited      Int       @default(0)
  continent_id       Int
  continent          Continent @relation(fields: [continent_id], references: [continent_id])
  origin_planes      Plane[]   @relation("OriginAirport")
  destination_planes Plane[]   @relation("DestinationAirport")
}

model Continent {
  continent_id Int       @id @default(autoincrement())
  name         String
  airports     Airport[]
}

model Payment {
  id              Int      @id @default(autoincrement())
  orderId         String   @unique
  status          String
  transactionId   String?
  amount          Float
  snapToken       String?
  customerName    String
  customerEmail   String
  customerPhone   String
  customerAddress String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}